package tests.penTests;

import entities.Pen;
import tests.penTests.data.PenTestData;
import org.testng.Assert;
import org.testng.annotations.Test;

public class PenTestWrite {
    @Test(dataProviderClass = PenTestData.class, dataProvider = "writeMethodPositiveData")
    public void testWritePositive(String word, double sizeLetter, int inkContainerValue, String expected) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);

        String writtenWord = pen.write(word);

        Assert.assertEquals(writtenWord, expected);
    }

    @Test(dataProviderClass = PenTestData.class, dataProvider = "writeMethodEmptyWordData")
    public void testWriteNegative(String word, double sizeLetter, int inkContainerValue, String expected) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);

        String result = pen.write(word);

        Assert.assertEquals(result, expected);
    }

    @Test(dataProviderClass = PenTestData.class, dataProvider = "writeMethodWithExceptionData")
    public void testWriteNegativeLetterSizeForException(int inkContainerValue) {
        Pen pen = new Pen(inkContainerValue, PenTestData.anyValidSizeLetter);

        try {
            pen.write(PenTestData.randomWord);
            Assert.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            Assert.assertTrue(true);
        }
    }

    @Test(dataProviderClass = PenTestData.class, dataProvider = "writeMethodTwoWordsData")
    public void testWriteFloatInkLength(double sizeLetter, int inkContainerValue, String firstWord, String secondWord) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);

        pen.write(firstWord);

        String writtenWord = pen.write(secondWord);

        Assert.assertEquals(writtenWord, secondWord);
    }

}
